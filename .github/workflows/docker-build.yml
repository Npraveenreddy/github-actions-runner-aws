name: docker-build

on: [push]

jobs:   
  build:
    runs-on: ubuntu-latest
    env:
      DO_DEPLOY: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v3
      - uses: engineerd/setup-kind@v0.5.0
        with:
          version: "v0.11.1"
      - name: Create env var for docker tag
        run: echo "TAG=$(date +%s)" >> "$GITHUB_ENV"
      - name: Create env var for git sha tag
        run: echo "HASH=$(git rev-parse --short "$GITHUB_SHA")" >> "$GITHUB_ENV"
      - name: Create env var for ECR repo
        run:  echo "ECR_REPOSITORY=github-actions-runner" >> "$GITHUB_ENV"
      - name: Configure AWS Credentials
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"
        uses: aws-actions/configure-aws-credentials@v1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build the Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: docker build . --file Dockerfile --tag $ECR_REGISTRY/$ECR_REPOSITORY:${TAG} --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest --tag $ECR_REGISTRY/$ECR_REPOSITORY:${HASH}
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          image-ref: '${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.HASH}}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      - name: Run Dockle for docker best practices
        uses: hands-lab/dockle-action@v1
        env:
          DOCKLE_ACCEPT_FILE_EXTENSIONS: pem
        with:
          image: '${{steps.login-ecr.outputs.registry}}/${{env.ECR_REPOSITORY}}:${{env.HASH}}'
          exit-code: '1'
      - name: Push docker image to Amazon ECR with just HASH
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${HASH}
      - name: Setup namespace and secrets
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          kubectl create ns gitaction
          kubectl create secret docker-registry ecrcred \
            --docker-server=$ECR_REGISTRY \
            --docker-username=AWS \
            --docker-password=$(aws ecr get-login-password) \
            --namespace=gitaction
          kubectl create secret generic github-secret \
            --from-literal=PERSONAL_ACCESS_TOKEN=${{ secrets.ROBOT_MAC_FC_TOKEN }} \
            --type='opaque' \
            --namespace=gitaction
      - name: Running image in kind
        run: |
          sed -i 's/LATEST_IMAGE_REF/${{steps.login-ecr.outputs.registry}}\/${{env.ECR_REPOSITORY}}:${{env.HASH}}/g' kube-manifest.yml
          kubectl apply -f kube-manifest.yml
          while [[ $(kubectl get pods -n gitaction -l app=runner -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do echo "waiting for pod" && sleep 15; done
          until kubectl logs -n gitaction -l app=runner | grep "Listening for Jobs"; do echo "waiting for runner to connect to github" && sleep 5; done
      - name: Test GH API to see runner was actually registered and online
        run: |
          curl -s \
            -H "Accept: application/vnd.github.v3+json" \
            -u robot-mac-fc:${{ secrets.ROBOT_MAC_FC_TOKEN }} \
            https://api.github.com/repos/CMSgov/github-actions-runner-aws/actions/runners \
          | grep "online"
      - name: Test our internal runner with call to separate workflow
        uses: convictional/trigger-workflow-and-wait@v1.6.3
        with:
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          ref: ${{ github.ref }}
          github_token: ${{ secrets.ROBOT_MAC_FC_TOKEN }}
          workflow_file_name: runner-test.yml
      - name: Push docker image to Amazon ECR with all tags
        if: ${{ fromJSON(env.DO_DEPLOY) }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags
